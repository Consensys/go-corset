;; Copyright Consensys Software Inc.
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
;; the License. You may obtain a copy of the License at
;;
;; http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
;; an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
;; specific language governing permissions and limitations under the License.
;;
;; SPDX-License-Identifier: Apache-2.0

(defpurefun (vanishes! (e0 :int)) (== e0 0))
(defpurefun ((force-bin :binary :force) x) x)
(defpurefun (is-binary (e0 :int)) (or! (== e0 0) (== e0 1)))
;; =============================================================================
;; Conditionals (DEPRECATED)
;; =============================================================================
(defpurefun (if-zero (cond :int) (then :any)) (if (== cond 0) then))
(defpurefun (if-zero (cond :int) (then :any) (else :any)) (if (== cond 0) then else))
(defpurefun (if-not-zero (cond :int) (then :any)) (if (!= cond 0) then))
(defpurefun (if-not-zero (cond :int) (then :any) (else :any)) (if (!= cond 0) then else))
(defpurefun (if-eq (x :int) (y :int) (then :any)) (if (eq! x y) then))
(defpurefun (if-eq-else (x :int) (y :int) (then :any) (else :any)) (if (eq! x y) then else))
(defpurefun (if-not-eq (x :int) (y :int) (then :any)) (if (!= x y) then))
(defpurefun (if-not-eq (x :int) (y :int) (then :any) (else :any)) (if (!= x y) then else))
(defpurefun (if-not (cond :bool) (then :any)) (if (not! cond) then))
(defpurefun (if-not (cond :bool) (then :any) (else :any)) (if (not! cond) then else))

;; =============================================================================
;; Boolean connectives (DEPRECATED)
;; =============================================================================
(defpurefun (or! (a :bool) (b :bool)) (∨ a b))
(defpurefun (or! (a :bool) (b :bool) (c :bool)) (∨ a b c))
(defpurefun (or! (a :bool) (b :bool) (c :bool) (d :bool)) (∨ a b c d))
(defpurefun (or! (a :bool) (b :bool) (c :bool) (d :bool) (e :bool)) (∨ a b c d e))
(defpurefun (or! (a :bool) (b :bool) (c :bool) (d :bool) (e :bool) (f :bool)) (∨ a b c d e f))
(defpurefun (and! (a :bool) (b :bool)) (∧ a b))
(defpurefun (and! (a :bool) (b :bool) (c :bool)) (∧ a b c))
(defpurefun (and! (a :bool) (b :bool) (c :bool) (d :bool)) (∧ a b c d))
(defpurefun (and! (a :bool) (b :bool) (c :bool) (d :bool) (e :bool)) (∧ a b c d e))
(defpurefun (and! (a :bool) (b :bool) (c :bool) (d :bool) (e :bool) (f :bool)) (∧ a b c d e f))
(defpurefun ((eq! :bool) (x :int) (y :int)) (== x y))
(defpurefun ((neq! :bool) (x :int) (y :int)) (!= x y))
(defpurefun ((not! :bool) (x :bool)) (if x (!= 0 0) (== 0 0)))
(defpurefun ((is-not-zero! :bool) (x :int)) (!= x 0))

;; =============================================================================
;; Chronological functions
;; =============================================================================
(defpurefun (next (X :any)) (shift X 1))
(defpurefun (prev (X :any)) (shift X -1))
;; Ensure e0 has increased by offset w.r.t previous row.
(defpurefun ((did-inc! :bool) (e0 :int) (offset :int)) (== e0 (+ (prev e0) offset)))
;; Ensure e0 has decreased by offset w.r.t previous row.
(defpurefun ((did-dec! :bool) (e0 :int) (offset :int)) (== e0 (- (prev e0) offset)))
;; Ensure e0 will increase by offset w.r.t next row.
(defpurefun ((will-inc! :bool) (e0 :int) (offset :int)) (will-eq! e0 (+ e0 offset)))
;; Ensure e0 will decrease by offset w.r.t next row.
(defpurefun ((will-dec! :bool) (e0 :int) (offset :int)) (== (next e0) (- e0 offset)))
;; Ensure e0 remained constant w.r.t previous row.
(defpurefun ((remained-constant! :bool) (e0 :int)) (== e0 (prev e0)))
;; Ensure e0 will remain constant w.r.t next row.
(defpurefun ((will-remain-constant! :bool) (e0 :int)) (will-eq! e0 e0))
;; Ensure e0 has changed its value w.r.t previous row.
(defpurefun ((did-change! :bool) (e0 :int)) (!= e0 (prev e0)))
;; Ensure e0 will remain constant w.r.t next row.
(defpurefun ((will-change! :bool) (e0 :int)) (will-neq! e0 e0))
;; Ensure e1 equals value of e0 in previous row.
(defpurefun ((was-eq! :bool) (e0 :int) (e1 :int)) (== (prev e0) e1))
;; Ensure e1 will equal value of e0 in next row.
(defpurefun ((will-eq! :bool) (e0 :int) (e1 :int)) (== (next e0) e1))
;; Ensure e1 will not equal value of e0 in next row.
(defpurefun ((will-neq! :bool) (e0 :int) (e1 :int)) (!= (next e0) e1))
;; =============================================================================
;; Helpers
;; =============================================================================

;; counter constancy constraint
(defpurefun (counter-constancy (ct :int) (X :int))
  (if (!= ct 0)
               (remained-constant! X)))

;; perspective constancy constraint
(defpurefun (perspective-constancy (PERSPECTIVE_SELECTOR :int) (X :int))
            (if (!= (* PERSPECTIVE_SELECTOR (prev PERSPECTIVE_SELECTOR)) 0)
                         (remained-constant! X)))

;; base-X decomposition constraints
(defpurefun ((base-X-decomposition :bool) (ct :int) (base :int) (acc :int) (digits :int))
  (if (== ct 0)
           (== acc digits)
           (== acc (+ (* base (prev acc)) digits))))

;; byte decomposition constraint
(defpurefun (byte-decomposition (ct :int) (acc :int) (bytes :int)) (base-X-decomposition ct 256 acc bytes))

;; bit decomposition constraint
(defpurefun (bit-decomposition (ct :int) (acc :int) (bits :int)) (base-X-decomposition ct 2 acc bits))

;; plateau constraints
(defpurefun (plateau-constraint (CT :int) (X :binary) (C :int))
            (begin (debug (stamp-constancy CT C))
                   (if (== C 0)
                            (== X 1)
                            (if (== CT 0)
                                (vanishes! X)
                              (if (== CT C)
                                  (== X 1)
                                (remained-constant! X))))))

;; stamp constancy imposes that the column C may only
;; change at rows where the STAMP column changes.
(defpurefun (stamp-constancy (STAMP :int) (C :int))
            (if (will-remain-constant! STAMP)
                (will-remain-constant! C)))

(defpurefun (has-0-1-increments (STAMP :int)) (or!  (will-inc!  STAMP  0)
                                                    (will-inc!  STAMP  1)))

;; =============================================================================
;; Casts
;; =============================================================================
(defpurefun ((i1 :i1 :force) x) x)
(defpurefun ((i2 :i2 :force) x) x)
(defpurefun ((i3 :i3 :force) x) x)
(defpurefun ((i4 :i4 :force) x) x)
(defpurefun ((i5 :i5 :force) x) x)
(defpurefun ((i6 :i6 :force) x) x)
(defpurefun ((i7 :i7 :force) x) x)
(defpurefun ((i8 :i8 :force) x) x)
(defpurefun ((i9 :i9 :force) x) x)
(defpurefun ((i10 :i10 :force) x) x)
(defpurefun ((i11 :i11 :force) x) x)
(defpurefun ((i12 :i12 :force) x) x)
(defpurefun ((i13 :i13 :force) x) x)
(defpurefun ((i14 :i14 :force) x) x)
(defpurefun ((i15 :i15 :force) x) x)
(defpurefun ((i16 :i16 :force) x) x)
(defpurefun ((i17 :i17 :force) x) x)
(defpurefun ((i18 :i18 :force) x) x)
(defpurefun ((i19 :i19 :force) x) x)
(defpurefun ((i20 :i20 :force) x) x)
(defpurefun ((i21 :i21 :force) x) x)
(defpurefun ((i22 :i22 :force) x) x)
(defpurefun ((i23 :i23 :force) x) x)
(defpurefun ((i24 :i24 :force) x) x)
(defpurefun ((i25 :i25 :force) x) x)
(defpurefun ((i26 :i26 :force) x) x)
(defpurefun ((i27 :i27 :force) x) x)
(defpurefun ((i28 :i28 :force) x) x)
(defpurefun ((i29 :i29 :force) x) x)
(defpurefun ((i30 :i30 :force) x) x)
(defpurefun ((i31 :i31 :force) x) x)
(defpurefun ((i32 :i32 :force) x) x)
(defpurefun ((i33 :i33 :force) x) x)
(defpurefun ((i34 :i34 :force) x) x)
(defpurefun ((i35 :i35 :force) x) x)
(defpurefun ((i36 :i36 :force) x) x)
(defpurefun ((i37 :i37 :force) x) x)
(defpurefun ((i38 :i38 :force) x) x)
(defpurefun ((i39 :i39 :force) x) x)
(defpurefun ((i40 :i40 :force) x) x)
(defpurefun ((i41 :i41 :force) x) x)
(defpurefun ((i42 :i42 :force) x) x)
(defpurefun ((i43 :i43 :force) x) x)
(defpurefun ((i44 :i44 :force) x) x)
(defpurefun ((i45 :i45 :force) x) x)
(defpurefun ((i46 :i46 :force) x) x)
(defpurefun ((i47 :i47 :force) x) x)
(defpurefun ((i48 :i48 :force) x) x)
(defpurefun ((i49 :i49 :force) x) x)
(defpurefun ((i50 :i50 :force) x) x)
(defpurefun ((i51 :i51 :force) x) x)
(defpurefun ((i52 :i52 :force) x) x)
(defpurefun ((i53 :i53 :force) x) x)
(defpurefun ((i54 :i54 :force) x) x)
(defpurefun ((i55 :i55 :force) x) x)
(defpurefun ((i56 :i56 :force) x) x)
(defpurefun ((i57 :i57 :force) x) x)
(defpurefun ((i58 :i58 :force) x) x)
(defpurefun ((i59 :i59 :force) x) x)
(defpurefun ((i60 :i60 :force) x) x)
(defpurefun ((i61 :i61 :force) x) x)
(defpurefun ((i62 :i62 :force) x) x)
(defpurefun ((i63 :i63 :force) x) x)
(defpurefun ((i64 :i64 :force) x) x)
(defpurefun ((i65 :i65 :force) x) x)
(defpurefun ((i66 :i66 :force) x) x)
(defpurefun ((i67 :i67 :force) x) x)
(defpurefun ((i68 :i68 :force) x) x)
(defpurefun ((i69 :i69 :force) x) x)
(defpurefun ((i70 :i70 :force) x) x)
(defpurefun ((i71 :i71 :force) x) x)
(defpurefun ((i72 :i72 :force) x) x)
(defpurefun ((i73 :i73 :force) x) x)
(defpurefun ((i74 :i74 :force) x) x)
(defpurefun ((i75 :i75 :force) x) x)
(defpurefun ((i76 :i76 :force) x) x)
(defpurefun ((i77 :i77 :force) x) x)
(defpurefun ((i78 :i78 :force) x) x)
(defpurefun ((i79 :i79 :force) x) x)
(defpurefun ((i80 :i80 :force) x) x)
(defpurefun ((i81 :i81 :force) x) x)
(defpurefun ((i82 :i82 :force) x) x)
(defpurefun ((i83 :i83 :force) x) x)
(defpurefun ((i84 :i84 :force) x) x)
(defpurefun ((i85 :i85 :force) x) x)
(defpurefun ((i86 :i86 :force) x) x)
(defpurefun ((i87 :i87 :force) x) x)
(defpurefun ((i88 :i88 :force) x) x)
(defpurefun ((i89 :i89 :force) x) x)
(defpurefun ((i90 :i90 :force) x) x)
(defpurefun ((i91 :i91 :force) x) x)
(defpurefun ((i92 :i92 :force) x) x)
(defpurefun ((i93 :i93 :force) x) x)
(defpurefun ((i94 :i94 :force) x) x)
(defpurefun ((i95 :i95 :force) x) x)
(defpurefun ((i96 :i96 :force) x) x)
(defpurefun ((i97 :i97 :force) x) x)
(defpurefun ((i98 :i98 :force) x) x)
(defpurefun ((i99 :i99 :force) x) x)
(defpurefun ((i100 :i100 :force) x) x)
(defpurefun ((i101 :i101 :force) x) x)
(defpurefun ((i102 :i102 :force) x) x)
(defpurefun ((i103 :i103 :force) x) x)
(defpurefun ((i104 :i104 :force) x) x)
(defpurefun ((i105 :i105 :force) x) x)
(defpurefun ((i106 :i106 :force) x) x)
(defpurefun ((i107 :i107 :force) x) x)
(defpurefun ((i108 :i108 :force) x) x)
(defpurefun ((i109 :i109 :force) x) x)
(defpurefun ((i110 :i110 :force) x) x)
(defpurefun ((i111 :i111 :force) x) x)
(defpurefun ((i112 :i112 :force) x) x)
(defpurefun ((i113 :i113 :force) x) x)
(defpurefun ((i114 :i114 :force) x) x)
(defpurefun ((i115 :i115 :force) x) x)
(defpurefun ((i116 :i116 :force) x) x)
(defpurefun ((i117 :i117 :force) x) x)
(defpurefun ((i118 :i118 :force) x) x)
(defpurefun ((i119 :i119 :force) x) x)
(defpurefun ((i120 :i120 :force) x) x)
(defpurefun ((i121 :i121 :force) x) x)
(defpurefun ((i122 :i122 :force) x) x)
(defpurefun ((i123 :i123 :force) x) x)
(defpurefun ((i124 :i124 :force) x) x)
(defpurefun ((i125 :i125 :force) x) x)
(defpurefun ((i126 :i126 :force) x) x)
(defpurefun ((i127 :i127 :force) x) x)
(defpurefun ((i128 :i128 :force) x) x)
(defpurefun ((i129 :i129 :force) x) x)
(defpurefun ((i130 :i130 :force) x) x)
(defpurefun ((i131 :i131 :force) x) x)
(defpurefun ((i132 :i132 :force) x) x)
(defpurefun ((i133 :i133 :force) x) x)
(defpurefun ((i134 :i134 :force) x) x)
(defpurefun ((i135 :i135 :force) x) x)
(defpurefun ((i136 :i136 :force) x) x)
(defpurefun ((i137 :i137 :force) x) x)
(defpurefun ((i138 :i138 :force) x) x)
(defpurefun ((i139 :i139 :force) x) x)
(defpurefun ((i140 :i140 :force) x) x)
(defpurefun ((i141 :i141 :force) x) x)
(defpurefun ((i142 :i142 :force) x) x)
(defpurefun ((i143 :i143 :force) x) x)
(defpurefun ((i144 :i144 :force) x) x)
(defpurefun ((i145 :i145 :force) x) x)
(defpurefun ((i146 :i146 :force) x) x)
(defpurefun ((i147 :i147 :force) x) x)
(defpurefun ((i148 :i148 :force) x) x)
(defpurefun ((i149 :i149 :force) x) x)
(defpurefun ((i150 :i150 :force) x) x)
(defpurefun ((i151 :i151 :force) x) x)
(defpurefun ((i152 :i152 :force) x) x)
(defpurefun ((i153 :i153 :force) x) x)
(defpurefun ((i154 :i154 :force) x) x)
(defpurefun ((i155 :i155 :force) x) x)
(defpurefun ((i156 :i156 :force) x) x)
(defpurefun ((i157 :i157 :force) x) x)
(defpurefun ((i158 :i158 :force) x) x)
(defpurefun ((i159 :i159 :force) x) x)
(defpurefun ((i160 :i160 :force) x) x)
(defpurefun ((i161 :i161 :force) x) x)
(defpurefun ((i162 :i162 :force) x) x)
(defpurefun ((i163 :i163 :force) x) x)
(defpurefun ((i164 :i164 :force) x) x)
(defpurefun ((i165 :i165 :force) x) x)
(defpurefun ((i166 :i166 :force) x) x)
(defpurefun ((i167 :i167 :force) x) x)
(defpurefun ((i168 :i168 :force) x) x)
(defpurefun ((i169 :i169 :force) x) x)
(defpurefun ((i170 :i170 :force) x) x)
(defpurefun ((i171 :i171 :force) x) x)
(defpurefun ((i172 :i172 :force) x) x)
(defpurefun ((i173 :i173 :force) x) x)
(defpurefun ((i174 :i174 :force) x) x)
(defpurefun ((i175 :i175 :force) x) x)
(defpurefun ((i176 :i176 :force) x) x)
(defpurefun ((i177 :i177 :force) x) x)
(defpurefun ((i178 :i178 :force) x) x)
(defpurefun ((i179 :i179 :force) x) x)
(defpurefun ((i180 :i180 :force) x) x)
(defpurefun ((i181 :i181 :force) x) x)
(defpurefun ((i182 :i182 :force) x) x)
(defpurefun ((i183 :i183 :force) x) x)
(defpurefun ((i184 :i184 :force) x) x)
(defpurefun ((i185 :i185 :force) x) x)
(defpurefun ((i186 :i186 :force) x) x)
(defpurefun ((i187 :i187 :force) x) x)
(defpurefun ((i188 :i188 :force) x) x)
(defpurefun ((i189 :i189 :force) x) x)
(defpurefun ((i190 :i190 :force) x) x)
(defpurefun ((i191 :i191 :force) x) x)
(defpurefun ((i192 :i192 :force) x) x)
(defpurefun ((i193 :i193 :force) x) x)
(defpurefun ((i194 :i194 :force) x) x)
(defpurefun ((i195 :i195 :force) x) x)
(defpurefun ((i196 :i196 :force) x) x)
(defpurefun ((i197 :i197 :force) x) x)
(defpurefun ((i198 :i198 :force) x) x)
(defpurefun ((i199 :i199 :force) x) x)
(defpurefun ((i200 :i200 :force) x) x)
(defpurefun ((i201 :i201 :force) x) x)
(defpurefun ((i202 :i202 :force) x) x)
(defpurefun ((i203 :i203 :force) x) x)
(defpurefun ((i204 :i204 :force) x) x)
(defpurefun ((i205 :i205 :force) x) x)
(defpurefun ((i206 :i206 :force) x) x)
(defpurefun ((i207 :i207 :force) x) x)
(defpurefun ((i208 :i208 :force) x) x)
(defpurefun ((i209 :i209 :force) x) x)
(defpurefun ((i210 :i210 :force) x) x)
(defpurefun ((i211 :i211 :force) x) x)
(defpurefun ((i212 :i212 :force) x) x)
(defpurefun ((i213 :i213 :force) x) x)
(defpurefun ((i214 :i214 :force) x) x)
(defpurefun ((i215 :i215 :force) x) x)
(defpurefun ((i216 :i216 :force) x) x)
(defpurefun ((i217 :i217 :force) x) x)
(defpurefun ((i218 :i218 :force) x) x)
(defpurefun ((i219 :i219 :force) x) x)
(defpurefun ((i220 :i220 :force) x) x)
(defpurefun ((i221 :i221 :force) x) x)
(defpurefun ((i222 :i222 :force) x) x)
(defpurefun ((i223 :i223 :force) x) x)
(defpurefun ((i224 :i224 :force) x) x)
(defpurefun ((i225 :i225 :force) x) x)
(defpurefun ((i226 :i226 :force) x) x)
(defpurefun ((i227 :i227 :force) x) x)
(defpurefun ((i228 :i228 :force) x) x)
(defpurefun ((i229 :i229 :force) x) x)
(defpurefun ((i230 :i230 :force) x) x)
(defpurefun ((i231 :i231 :force) x) x)
(defpurefun ((i232 :i232 :force) x) x)
(defpurefun ((i233 :i233 :force) x) x)
(defpurefun ((i234 :i234 :force) x) x)
(defpurefun ((i235 :i235 :force) x) x)
(defpurefun ((i236 :i236 :force) x) x)
(defpurefun ((i237 :i237 :force) x) x)
(defpurefun ((i238 :i238 :force) x) x)
(defpurefun ((i239 :i239 :force) x) x)
(defpurefun ((i240 :i240 :force) x) x)
(defpurefun ((i241 :i241 :force) x) x)
(defpurefun ((i242 :i242 :force) x) x)
(defpurefun ((i243 :i243 :force) x) x)
(defpurefun ((i244 :i244 :force) x) x)
(defpurefun ((i245 :i245 :force) x) x)
(defpurefun ((i246 :i246 :force) x) x)
(defpurefun ((i247 :i247 :force) x) x)
(defpurefun ((i248 :i248 :force) x) x)
(defpurefun ((i249 :i249 :force) x) x)
(defpurefun ((i250 :i250 :force) x) x)
(defpurefun ((i251 :i251 :force) x) x)
(defpurefun ((i252 :i252 :force) x) x)
(defpurefun ((i253 :i253 :force) x) x)
(defpurefun ((i254 :i254 :force) x) x)
(defpurefun ((i255 :i255 :force) x) x)
(defpurefun ((i256 :i256 :force) x) x)
