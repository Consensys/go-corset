;; Shift a u8 word a given number of bits to the left.
fn u8_bitshf(value u8, n u2) -> (res u8) {
  var b0,b1,b2,b3,b4,b5,b6,b7 u1
  ;; Check for base case
  if n == 0 goto base
  ;; Recursive case
  var acc u8
  var tmp u1
  var b u1
  var m u2
  ;; Decompose value
  b7,b6,b5,b4,b3,b2,b1,b0 = value
  ;; Recompose shifted value
  acc = b6
  tmp,acc = acc * 2
  tmp,acc = acc + b5
  tmp,acc = acc * 2
  tmp,acc = acc + b4
  tmp,acc = acc * 2
  tmp,acc = acc + b3
  tmp,acc = acc * 2
  tmp,acc = acc + b2
  tmp,acc = acc * 2
  tmp,acc = acc + b1
  tmp,acc = acc * 2
  tmp,acc = acc + b0
  tmp,acc = acc * 2
  ;;
  b,m = n - 1
  res = u8_bitshf(acc,m)
  return
base:
  res = value
  return
}
