;; The purpose of this test is that the following two implementations
;; should be identical in terms of execution; however, the former
;; should be slightly more efficient in terms of constraints.

fn diamond_a(x u16, y u16) -> (res u2) {
  var xn, yn u1
  xn = x==0 ? 0 : 1
  yn = y==0 ? 0 : 1
  ;;
  res = (2*yn) + xn
  return
}

fn diamond_b(x u16, y u16) -> (res u2) {
  var tmp u1
  ;;
  if x == 0 goto l1
  tmp = 1
  goto l2
l1:
  tmp = 0
l2:
  if y == 0 goto l3
  res = tmp + 2
  return
l3:
  res = tmp
  return
}
